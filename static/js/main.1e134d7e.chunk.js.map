{"version":3,"sources":["Components/ToDoItem.js","Components/ToDos.js","Components/Layout/Header.js","Components/AddToDo.js","Components/Pages/About.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","ToDos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddToDo","state","e","setState","target","name","value","onSubmit","preventDefault","addToDo","display","flex","placeholder","className","add","propType","PropTypes","func","isRequired","About","Fragment","App","axios","delete","then","res","filter","console","log","post","uuid","data","erro","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e134d7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class ToDoItem extends Component {\r\n\r\n    getStyle = () =>{\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: 10,\r\n            borderBottom: '1px #ccc double',\r\n            textDecoration: this.props.todo.completed ? 'line-through': 'none'\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { id, title} = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/> { \"   \"}\r\n                    {title}\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nToDoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n    \r\n}\r\n\r\nconst btnStyle= {\r\n    background: '#f00',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n\r\n}\r\n\r\nexport default ToDoItem\r\n","import React, { Component } from 'react';\r\nimport ToDoItem from './ToDoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ToDos extends Component {\r\n\r\n    render() {\r\n        // console.log(this.props.todos);\r\n        return this.props.todos.map(todo => ( <\r\n            ToDoItem key = { todo.id }\r\n            todo = { todo }\r\n            markComplete = { this.props.markComplete }\r\n            delTodo = { this.props.delTodo }\r\n            />\r\n        ));\r\n    }\r\n}\r\n\r\nToDos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ToDos;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Header(){\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>ToDo List</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    );\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle={\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import ToDoItem from './ToDoItem';\r\n\r\nexport class AddToDo extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onChange = (e) =>{\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) =>{\r\n        e.preventDefault();\r\n        this.props.addToDo(this.state.title);\r\n        this.setState({title:''});\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form style={{display: 'flex'}} onSubmit={this.onSubmit}>\r\n                <input \r\n                type=\"text\"\r\n                name=\"title\" \r\n                style={{flex: '10', padding: 10}}\r\n                placeholder=\"Add ToDo ...\"\r\n                value={this.state.title}\r\n                onChange={this.onChange} />\r\n\r\n                <input\r\n                    type= \"submit\" value=\"Submit\"\r\n                    className=\"btn\"\r\n                    onClick={this.add}\r\n                    style={{flex: '1'}} \r\n                    />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddToDo.propType = {\r\n    addToDo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddToDo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the ToDo list app v1.0.0. It is a part of React crah course by Brad Traversiy</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Todos from './Components/ToDos';\nimport Header from './Components/Layout/Header';\nimport AddToDo from './Components/AddToDo';\nimport About from './Components/Pages/About';\nimport {uuid} from 'uuidv4';\n\nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  //Toggle complete\n  markComplete = (id) => {\n    this.setState( {todos: this.state.todos.map(todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })\n  });\n  }\n\n  //Delete Todo\n delTodo = (id) => {\n    axios.delete(`http://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res=> this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]}))\n }\n\n  addToDo = (title) =>{\n   console.log(\"aa\");\n   try{\n    axios.post('http://jsonplaceholder.typicode.com/todos', {id: uuid(),title,\n     completed:false\n  }).then(res => {this.setState({todos: [...this.state.todos, res.data]})\n  console.log(res);\n} )\n}catch(erro){\n  console.log(erro);\n}\n  \n\n  }\n  \n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=9').then(res => {this.setState({todos: res.data});\n    // console.log(this.state.todos);\n  });\n  }\n\n  render(){\n    console.log(this.state.todos);\n  return (\n    <Router>\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <Route exact path=\"/\" render={ (props) => {\n          return(\n            <React.Fragment>\n             <AddToDo addToDo={this.addToDo} />\n            <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\n           </React.Fragment>\n          );\n        }} />\n        <Route path=\"/about\" component={About}/>\n      </div>\n    </div>\n    </Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}